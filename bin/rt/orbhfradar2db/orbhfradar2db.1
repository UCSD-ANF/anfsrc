.TH ORBHFRADAR2DB 1 "$Date: 2009/03/05 00:52:51 $"
.SH NAME
orbhfradar2db \- take HF Radar packets from an orb and store in a directory hierarchy
.SH SYNOPSIS
.nf
\fBorbhfradar2db \fP[-v] [-c] [-o] [-m \fImatch\fP] [-r \fIreject\fP] 
		[-p \fIpfname\fP] [-S \fIstatefile\fP] [-d \fIdbname\fP] 
		[-A \fIarchive_pattern\fP] [-a \fIafter\fP] 
		\fIorbname\fP \fIbuilddir\fP
.fi
.SH DESCRIPTION
\fBorbhfradar2db\fP takes data-packets for high-frequency radar data, for 
example CODAR (Coastal Ocean Dynamics
Applications Radar) data, from an orbserver (given by \fIorbname\fP on the 
command line), unwraps them, and populates a directory
structure with the packet contents, writing one packet per file. The
files are named according to their orb timestamps, based on a format
specification compatible with the epoch2str(3) command, as given in the
\fBorbhfradar2db\fP parameter file (see example below).  In addition to the 
standard epoch2str escape codes, the codes %{sta}, %{format}, and %{patterntype} 
may be used to represent the station name, format code, and patterntype code,
respectively. \fBorbhfradar2db\fP assumes the orb source-name consists entirely of the 
station-code followed by the packet-type suffix. All subdirectory
hierarchies are built in the \fIbuilddir\fP directory specified on the
command line.  A database given by \fIdbname\fP, in Hfradar0.6 or higher format
(as specified in the hfradartools(3p) library), may also be populated with information
on where to find the newly written files.

.SH OPTIONS
.IP -v
Verbose output

.IP -c
Cleanup mode. This option is only valid when using a database to track files. 
If this option is specified, orbhfradar2db periodically cleans up 
its database tables, removing rows older than some specified time, optionally
also removing the corresponding radial files. The repetition interval for the cleaning
and the amount of data to retain are configurable. For more detail see the 
descriptions of the \fIcleanup_interval_sec\fP and \fIcleanup_expressions\fP parameters below. 

.IP -o
Overwrite files that have identical pathnames to previous files. The default is 
not to overwrite previously created files. 

.IP "-m match"
Specify a match expression for orb packets. If this is blank, an expression
is constructed from the formats table of the parameter file. 

.IP "-r reject"
Specify a reject expression for orb packets.

.IP "-p pfname"
Specify alternate parameter-file name. The default is orbhfradar2db.pf.

.IP "-d dbname"
Store file-tracking information and metadata in the specified near-real-time database. 
This database is created if it does not already exist. Site and network information 
will be dynamically extracted into the database if the incoming packets are in LLUV 
format. Furthermore, new site rows will have the staname set to the 
most recently seen non-null value in the database for the relevant station.

.IP "-a after"
Start acquiring orbpackets after the specified orb-stream location. This argument 
may be the string "oldest", or a time string interpretable by str2epoch(3). The 
default is to process only newly arriving packets. 

.IP "-A archive_pattern"
Create archives of file-tracking information and metadata in a set of 
databases with standardized names. The \fIarchive_pattern\fP is essentially a database 
name (which may have a relative or full absolute path in addition to the 
descriptor name), though with the addition that any percent-escape characters interpretable 
by the epoch2str(3) command are replaced by the corresponding time values from the timestamp 
of the packet being saved. The effect is that packets are archived in successive databases
divided by time intervals, with the time-span of each database depending on what time fields 
appear in the \fIarchive_pattern\fP. 

.IP "-S statefile"
This option specifies a filename in which to save the current state of the program
(i.e. the current orb read position). 

.SH PARAMETER FILE
.IP archive_closure_sec
This parameter is used only in auto-archive creation mode (i.e. -A option). 
Open archive databases are closed if the last packet timestamp sent to the
database is this amount or more behind the system clock time. 

.IP cleanup_interval_sec
This parameter gives the frequency at which to perform the cleanup
operation. The value should be expressed in seconds, for example daily cleanup
would require a value of 86400, the number of seconds in a day. 

.IP cleanup_expressions
This array gives expressions for the tables to clean up. Each entry
must have a key which is a database tablename, and a value which is a
dbexpressions(5) database expression used to decide whether to keep a given 
row. The default behavior is to clean
up only the database rows and leave any external files
untouched.  However, if the corresponding external files (i.e. files
described by the dir/dfile field entries) should be removed as well,
the table (i.e. the key in the cleanup_expressions array) may be specified 
with the suffix \fI+extfiles\fP with no
spaces. For example, to clean up the radialfiles table entries and also
the stored radial files, use \fIradialfiles+extfiles\fP as the key.
Rows are removed if the cleanup expression evaluates to a \fItrue\fP value. 

.IP formats
The formats array lists orb packet suffixes that may be read off the
orbserver. Each suffix gives three values, respectively, for the
database format string, the database table in which to record the file,
and a pattern (\fIdfiles_pattern\fP) to be used in generating the
filename and relative path in which to store the file. The
\fIdfiles_pattern\fP is modified for each file based on the
percent-escape sequences it contains, which are filled in either
according to the patterns of epoch2str(3) or alternately with values
for the fields \fIsta\fP, \fIformat\fP, and \fIpatterntype\fP.

.nf

formats &Arr{
	EXP/HFRSS4 &Arr{
		format	hfrss4
		table	radialfiles
		dfiles_pattern	Radials/%{sta}/%{format}/Rads_%Y-%m/Rad_%{patterntype}_%{sta}_%y-%m-%d_%H%M
	}
	EXP/HFRSS10LLUV &Arr{
		format	hfrss10lluv
		table	radialfiles
		dfiles_pattern	Radials/%{sta}/%{format}/Rads_%Y-%m/Rad_%{patterntype}_%{sta}_%y-%m-%d_%H%M
	}
	EXP/HFRSS10RB &Arr{
		format	hfrss10rb
		table	radialfiles
		dfiles_pattern	Radials/%{sta}/%{format}/Rads_%Y-%m/Rad_%{patterntype}_%{sta}_%y-%m-%d_%H%M
	}
	EXP/RCDRVHF &Arr{
		format	rcdrvhf1.0
		table	vectorfiles
		dfiles_pattern	Totals/HF_format/Hourlies/HFTots_%{sta}_%Y-%m/Tot_%{sta}_%Y%m%d.%H%M.mat
	}
}

cleanup_interval_sec 3600
cleanup_expressions &Arr{
#       tablename               dbexpression (a true result causes removal of the row)
#-----------------------------------------------------------------------------------
# at most only one of the next two rows should be used, to prevent unnecessary redundant work:
#
#       radialfiles             time < now() - 31 * 86400
#       radialfiles+extfiles    time < now() - 31 * 86400
#
#       radialdiag              time < now() - 31 * 86400
#       hardwarediag            time < now() - 31 * 86400
#       radialmeta              time < now() - 31 * 86400
}
archive_closure_sec 43200
.fi

.SH EXAMPLE
.in 2c
.ft CW
.nf
localhost% orbhfradar2db -v -o -a oldest -d codardb angel.ucsd.edu .
orbhfradar2db: orbhfradar2db: using match expression ".*/(EXP/RCDRR|EXP/RCDRRHF|EXP/RCDRVHF)"
orbhfradar2db: received SDLJ/EXP/RCDRVHF timestamped  1/26/2004  11:00:00.000
orbhfradar2db: Creating ./Totals/HF_format/Hourlies/HFTots_SDLJ_2004-01/Tot_SDLJ_20040126.1100.mat
orbhfradar2db: received SDLJ/EXP/RCDRVHF timestamped  1/26/2004  12:00:00.000
orbhfradar2db: Creating ./Totals/HF_format/Hourlies/HFTots_SDLJ_2004-01/Tot_SDLJ_20040126.1200.mat

.fi
.ft R
.in
.SH "SEE ALSO"
.nf
hfradar2orb(1), orbserver(1), epoch2str(3), codartools(3p), hfradartools(3p)
.fi
.SH "BUGS AND CAVEATS"
Byte order in the packet is currently left untouched: files are reproduced in the
same byte order as they were placed on the orb.

The database storage is actually optional; orbhfradar2db by default just builds a hierarchy 
of files in a directory. This may be outmoded by now; perhaps the database name should be required. 

The switch to Hfradar0.5 probably broke the support for total-vector files. 
This can be fixed if those files become necessary in the real-time system. 

There are some conditions, usually involving changes to lat, lon, and center-frequency, 
which orbhfradar2db will detect in incoming data and complain about but will not be 
able to fix automatically. Warning messages are left in the log to fix the database issues
by hand. 

There are some pathological and hopefully rare conditions under which the automatic 
site-table updating will not succeed, instead leaving complaints in the log file and 
an untouched site table (though with the rest of the data properly recorded). Usually these 
conditions involve two or more physical station locations combined with out-of-order 
dataflow.

In cleanup mode, after the cleanup at program start, orbhfradar2db checks if database cleanup 
is necessary only after receiving a packet. 

The archive databases saved with the -A option each create their own site table, however these
site tables may not be comprehensive nor might the user want to maintain site-name descriptions 
separately in each one. They should probably be removed after archive creation, so only one
master site table (the one from the -d option) is used (arguably they should not be created 
in the first place). 

The database given in the -d option is checked to make sure it is of the right (or at least 
compatible) schema. However, the databases made in the -A option are assumed to be of the 
most current schema, or compatible. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc.
.fi
.\" $Id: orbhfradar2db.1,v 1.12 2009/03/05 00:52:51 lindquis Exp $
