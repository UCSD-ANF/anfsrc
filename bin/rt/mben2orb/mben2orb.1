.TH MBEN2ORB 1 "$Date: 2004/04/16 17:23:55 $"
.SH NAME
mben2orb, orbmben2socket, orbmben2port
.SH SYNOPSIS
.nf
mben2orb [-v] [-j] [-V] [-c] [-p serialport] [-d serialspeed] [-s net_sta_cha_loc ] [-o $ORB]
orbmben2socket [-v] [-V] [-p tcpport] [-s net_sta_cha_loc ] [-w tcpwindow] [-o $ORB]
orbmben2port
.fi
.SH DESCRIPTION
mben2orb is a program to acquire mben data streams from an ashtech GPS receiver for transport through the orb. It also provides a way to send serial command and control back to the receiver. Currently it acts like a buffered pipe. orbmben2socket is a way to get the mben data from the orb and to pipe it to an external application like CSRC's rtd. This is done by listening on a port (2772 default) and waiting for an incoming TCP connection, orbmben2socket is capable of receiving commands over the same socket and queuing them into the orb for transport to the receiver. Command packets are named: net_sta_cha_loc/EXP/MBEN_CMD, while normal data packets are named net_sta_cha_loc/EXP/MBEN. The receiver will work normally without receiving command packets. However, it does enable applications like CSRC's rtd remote control over the configuration of the GPS receiver. If you want this feature to work then you need to copy MBEN_CMD packets in the reverse path along which you copy regular MBEN packets. Very little alignment is done of the data before it becomes an orb packet. This is due to the oddities of the command and control language (regular MBEN data can be parsed). orbmben2socket takes a tcpwindow argument that allows you to control the amount of data in flight, this allows you to limit the amount of data lost when the TCP connection dies but it also limits the maximum throughput of the data.

A third program orbmben2port allows some one to connect to a local FIFO and gather MBEN data from the ORB as if it were a local application. This allows others to avoid the complexities of orb interfacing or TCP sockets.
.SH OPTIONS
.nf
-V				print version and usage, then exit

-v				verbose mode

-j				jumbo mode, accumulate multiple MBEN strings
				before generating an orb packet

-c				enable zlib compression


-p serialport		serial port to listen to (/dev/ttyS3 default) 
				115.2 kbaud

-d serialspeed		speed to set serial port to (default = 115.2 kbps)

-p tcpport		tcp port to listen for incoming connection on 
				(for CSRC's rtd to connect to get buffer MBEN data)

-s net_sta_cha_loc	the base srcname that is used for this data stream 
				(including command and control).

-w tcpwindow		size in bytes of the TCP transmit window 
				(default = system default).

-o $ORB			send data to this orb (default = ":")
.fi
.SH EXAMPLE
.ft CW
.in 2c
.nf
 mben2orb -p /dev/ttyS3 -s CSRC_LAB4_TEST -o roadnet-orb:
.fi
.in
.ft R
.SH LIBRARY
Requires antelope 4.5 or newer.
.SH "BUGS AND CAVEATS"
orbmben2port needs improvements before it is ready for primetime. 

orbmben2socket uses a fire and forget approach for sending MBEN data to the client. Any inflight data will be lost. This risk can be minimized by reducing the tcpwindow size, however, this also reduces the maximum speed at which the data can be transported to the client during recovery phases. A more elegant solution would require the client to provide information about what was last recieved.
.SH AUTHOR
.nf
Todd Hansen
UCSD/ROADNet Project
.fi
