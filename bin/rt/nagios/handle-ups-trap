#!/usr/bin/perl

# Copyright (c) 2004 The Regents of the University of California
# All Rights Reserved
#
# Permission to use, copy, modify and distribute any part of this software for
# educational, research and non-profit purposes, without fee, and without a
# written agreement is hereby granted, provided that the above copyright
# notice, this paragraph and the following three paragraphs appear in all
# copies.
#
# Those desiring to incorporate this software into commercial products or use
# for commercial purposes should contact the Technology Transfer Office,
# University of California, San Diego, 9500 Gilman Drive, La Jolla, CA
# 92093-0910, Ph: (858) 534-5815.
#
# IN NO EVENT SHALL THE UNIVESITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
# LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE, EVEN IF THE UNIVERSITY
# OF CALIFORNIA HAS BEEN ADIVSED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.  THE UNIVERSITY OF CALIFORNIA MAKES NO
# REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND, EITHER IMPLIED OR
# EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR THAT THE USE OF THE
# SOFTWARE WILL NOT INFRINGE ANY PATENT, TRADEMARK OR OTHER RIGHTS.
#
#   This code was created as part of the ROADNet project.
#   See http://roadnet.ucsd.edu/
#
#   Written By: Steve Foley 9/13/2005

# Just a quick nagios handler for Powerware 9125 UPS SNMP trap.
# To use this, feed output from NET-SNMP snmptrapd output to it on STDIN.
# Configure it as a handler in /etc/snmptrapd.conf and setup nagios to have
# passive devices point to it.

my ($message, $nagios_hostname, $nagios_servicedescr, $nagios_state);
my ($ip, $host, $alarmId, $alarmDescr, $trapMsg);
my (@args, @temp);
my %nagios_names =
   (
      "172.16.198.13"  => "toro-ups",
      "132.239.4.141"  => "roadnet-rack-ups-1",
      "172.23.34.43"   => "ringlaser-ups"
   );
my %severity_table =
   (
      "UPS-MIB::upsTrapAlarmEntryAdded" => 0,
      "UPS-MIB::upsTrapOnBattery" => 2,
      "UPS-MIB::upsAlarmInputBad" => 1,
      "UPS-MIB::upsAlarmBypassBad" => 1,
      "XUPS-MIB::xupstbOnBattery" => 2,
      "XUPS-MIB::xupstbLowBattery" => 2,
      "XUPS-MIB::xupstbUtilityPowerRestored" => 0,
      "XUPS-MIB::xupstbReturnFromLowBattery" => 0,
      "XUPS-MIB::xupstbOutputOverload" => 1,
      "XUPS-MIB::xupstbInternalFailure" => 2,
      "XUPS-MIB::xupstbBatteryDischarged" => 2,
      "XUPS-MIB::xupstbInverterFailure" => 2,
      "XUPS-MIB::xupstbOnBypass" => 2,
      "XUPS-MIB::xupstbBypassNotAvailable" => 1,
      "XUPS-MIB::xupstbOutputOff" => 2,
      "XUPS-MIB::xupstbInputFailure" => 1,
      "XUPS-MIB::xupstbShutdownImminent" => 2,
      "XUPS-MIB::xupstbOnInverter" => 0,
      "XUPS-MIB::xupstdAlarmBatteryBad" => 2,
      "XUPS-MIB::xupstdUpsShutdownPending" => 2,
      "XUPS-MIB::xupstdAmbientTempBad" => 2,
      "XUPS-MIB::xupstdAlarmTempBad" => 2,
      "XUPS-MIB::xupstdAlarmChargerFailed" => 2,
      "XUPS-MIB::xupstdAlarmFanFailure" => 2,
      "XUPS-MIB::xupstdAlarmFuseFailure" => 2,
      "XUPS-MIB::xupstdPowerSwitchBad" => 2,
      "XUPS-MIB::xupstdModuleFailure" => 2,
      "XUPS-MIB::xupstdOnAlternatePowerSource" => 1,
      "PowerNet-MIB::upsOverload" => 2,
      "PowerNet-MIB::upsDischarged" => 2,
      "PowerNet-MIB::upsOnBattery" => 1,
      "PowerNet-MIB::upsLowBattery" => 2,
      "PowerNet-MIB::powerRestored" => 0,
      "PowerNet-MIB::returnFromLowBattery" => 0,
      "PowerNet-MIB::upsSleeping" => 1,
      "PowerNet-MIB::upsWokeUp" => 0,
      "PowerNet-MIB::upsBatteryNeedsReplacement" => 1,
      "PowerNet-MIB::hardwareFailureBypass" => 2,
      "PowerNet-MIB::returnFromBypass" => 0,
      "PowerNet-MIB::baseFanFailure" => 2,
      "PowerNet-MIB::upsTurnedOn" => 0,
      "PowerNet-MIB::badVoltage" => 2,
      "PowerNet-MIB::badVoltageCleared" => 0,
      "PowerNet-MIB::chargerFailure" => 2,
      "PowerNet-MIB::chargerFailureCleared" => 0,
      "PowerNet-MIB::batteryOverTemperature" => 2,
      "PowerNet-MIB::batteryOverTemperatureCleared" => 0
   );

#open (DEBUG, ">>/tmp/out");
#print DEBUG "\nStarting Handler\n";
#print DEBUG "\n";

   # First line passed from snmptrapd is FQDN of host that sent the trap
   @args = <STDIN>;

   chomp($ip = $args[0]);
   chomp($host = $args[1]);

   chomp($alarmId = $args[2]);
   @temp = split /\s/, $alarmId;
   shift @temp;
   $alarmId = join " ", @temp;

   chomp($alarmDescr = $args[3]);
   @temp = split /\s/, $alarmDescr;
   shift @temp;
   $alarmDescr = join " ", @temp;

   chomp($trapMsg = $args[4]);
   @temp = split /\s/, $trapMsg;
   shift @temp;
   $trapMsg =  join " ", @temp;

#print DEBUG "ip: $ip, host: $host, alarmId: $alarmId, alarmDescr: $alarmDescr, trapMsg: $trapMsg\n";

   # Given a FQDN, get the short name of the host as it is setup in Nagios
   $nagios_hostname = $nagios_names{$host};
   $nagios_servicedesc="\"SNMP traps\"";
        
    # Get severity level (OK, WARNING, UNKNOWN, or CRITICAL) and plugin output based on trape type

    $nagios_state = $severity_table{$alarmDescr};
    if (!defined $nagios_state) { $nagios_state=3; }
    $message = "$alarmDescr, $trapMsg";

    # Submit passive check result to monitoring host
#print DEBUG "nagios host: $nagios_hostname, nagios service: $nagios_servicedesc\n";
#print DEBUG "nagios_state: $nagios_state\n";
#print DEBUG "alarmDescr: $alarmDescr\n";
#print DEBUG "message: $message\n";
   system("/opt/nagios/libexec/eventhandlers/submit_check_result "
	. "$nagios_hostname $nagios_servicedesc $nagios_state $message");

#close (DEBUG);
