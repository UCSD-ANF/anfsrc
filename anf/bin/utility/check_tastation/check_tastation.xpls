use strict;
use warnings;
use Datascope;
use orb;
use Net::Ping;
use Time::HiRes;
use Getopt::Long;
use Pod::Usage;
use Config;

our ($snmppath,$opt_H,$opt_o,$opt_d,$opt_c,$opt_p, $opt_v, $sta,
     $VERSION,%ERRORS,@OUTPUT,@REASON,@RETVAL,@RETVAL_SORT);

our $SNMP3_SECNAME = 'user'; # hardcoded on RV-50 and RAVENX
our $SNMP3_AUTHPASSWORD  = '53805380';
our $SNMP3_AUTHTYPE = 'MD5';
our $SNMP3_PRIVPASSWORD = '53805380';
our $SNMP3_PRIVPROTOCOL = 'DES';
our $SNMP3_RETRIES = 1;
our $SNMP3_TIMEOUT = 10; # seconds

# Number of pings
our $sent_packets = 4;

# Timeouts
our $tcp_timeout = 10;
our $icmp_timeout = 5;

# intervals
our $wb_tcp_interval = 20;
our $tcp_interval = 1;
our $icmp_interval = 1;

# Ping % loss thresholds
our $warn_loss = 50;
our $alarm_loss = 75;
our $crit_loss = 100;

# RTA thresholds in ms
our $warn_rta = 3000;
our $alarm_rta = 5000;
our $crit_rta = 10000;

# RSSI thresholds in dB
our $warn_rssi = -95;
our $alarm_rssi = -105;
our $crit_rssi = -115;

# Baler TCP port should be listening if station is up
our $tcp_port = 5381;

# Set SNMP value defaults to RRDtool NULL value;
my @required_results = qw(rssi netc ecio rset pwin btmp ping_loss ping_rta);
our %results = ();
foreach my $v (@required_results) {
    $results{$v} = '-';
}

our %cell_modem_models = (
    'ravenx' => {
        'rssi' => {
            'oid' => '1.3.6.1.4.1.20542.3.4.0',
            'check' => \&comp_rssi_thresholds
        },
        'netc' => {'oid' => '1.3.6.1.4.1.20542.3.3.0'},
        'ecio' => {'oid' => '1.3.6.1.4.1.20542.3.9.0'},
        'rset' => {'oid' => '1.3.6.1.4.1.20542.3.12.0'},
        'pwin' => {'oid' => '1.3.6.1.4.1.20542.3.13.0'},
        'btmp' => {'oid' => '1.3.6.1.4.1.20542.3.14.0'}
    },
    'rv50' => {
        'rssi' => {
            oid => '1.3.6.1.4.1.20542.9.1.1.1.261.0',
            check => \&comp_rssi_thresholds
        },
        'netc' => '1.3.6.1.4.1.20542.9.1.1.1.260.0',
        #'ecio' => '1.3.6.1.4.1.20542.9.1.1.1.261.0', NOT available on RV50
        #'rset' equivalent info not in MIB
        'pwin' => '1.3.6.1.4.1.20542.9.1.1.1.266.0',
        'btmp' => '1.3.6.1.4.1.20542.9.1.1.1.267.0',
    }
);

# Need to add some extra return values for intermapper
%ERRORS =     ( "OK" => "0",
                "WARNING" => "1",
                "ALARM" => "2",
                "CRITICAL" => "3",
                "DOWN" => "4",
                "UNKNOWN" => "5" );

sub untaint_env()
{
    # Untaint various environment variables
    my $safepath = '/usr/sbin:/sbin:/usr/bin:/bin';

    $ENV{'ANTELOPE'} =~ /\/opt\/antelope\/([\w\.-]+)/;
    $ENV{'ANTELOPE'}="/opt/antelope/".$1;

    #$safepath = $ENV{'ANTELOPE'} . "/bin:" . $safepath;

    if ($ENV{'ANF'}) {
        $ENV{'ANF'} =~ /\/opt\/anf\/([\w\.-]+)/;
        $ENV{'ANF'}="/opt/antelope/".$1;
        #    $safepath = $ENV{'ANF'} + "/bin:" + $safepath;
    }

    $ENV{"PATH"} = $safepath;
    $ENV{"BASH_ENV"} = "";

}


MAIN:
{
    my $opt_h;
    # Some input validation
    Getopt::Long::Configure("bundling");
    #usage() unless &Getopts('H:o:d:c:p:');
    GetOptions(
        'H=s' => \$opt_H, 'hostname=s' => \$opt_H,
        'o=s' => \$opt_o, 'orbname=s' => \$opt_o,
        'd=s' => \$opt_d, 'dlsta=s' => \$opt_d,
        'c=s' => \$opt_c, 'commtype=s' => \$opt_c,
        'p=s' => \$opt_p, 'provider=s' => \$opt_p,
        'v'   => \$opt_v, 'verbose' => \$opt_v,
        'h' => \$opt_h, 'help' => \$opt_h,
    ) || pod2usage(-verbose => 0, -exitval => $ERRORS{UNKNOWN});

    # Path to Net-SNMP tools
    if ($Config{osname} eq 'solaris') {
        $snmppath = '/usr/sfw/bin';
    } else {
        $snmppath = '/usr/bin';
    }
    print STDERR "osname is \"$Config{osname}\"\n" if $opt_v;
    print STDERR "SNMPPATH is \"$snmppath\"\n" if $opt_v;

    if ($opt_h)
    {
        pod2usage({-exitval => 0, -verbose => 2, -input => \*DATA});
    }

    usage() unless ($opt_H && $opt_o && $opt_d && $opt_c && $opt_p);

    $opt_H =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/;
    my $ip = $1;
    unless ($ip) {
        print "IP address \"$opt_H\" is not in dotted-quad format\n";
        exit $ERRORS{UNKNOWN};
    }
    my $orbname = $opt_o;
    my $dlsta = $opt_d;
    my $commtype = $opt_c;
    my $provider = $opt_p;

    untaint_env();

    # Need Net-SNMP snmpget tool because perl Net::SNMP is horrible w/ SNMPv3
    unless ( -e "$snmppath/snmpget" ) {
        print "$snmppath/snmpget not found\n";
        exit($ERRORS{UNKNOWN});
    }

    # Name of the packets we generate
    my $srcname = "$dlsta/pf/im";

    # Get sta portion of dlsta
    my (undef,$sta) = split "_",$dlsta;

    # Run tests
    test_station($ip,$commtype,$provider);

    # String to put in packet. Need the pf format to be like .*/pf/st packets so
    # orb2rrd can use them.
    my $pfstr = sprintf
    "dls\t&Arr{\n%s\t&Arr{\nplos\t%s\nprta\t%s\nrssi\t%s\nnetc\t%s\necio\t%s\nrset\t%s\npwin\t%s\nbtmp\t%s\n}\n}",
    $dlsta, $results{ping_loss}, $results{ping_rta}, $results{rssi},
    $results{netc}, $results{ecio}, $results{rset}, $results{pwin},
    $results{btmp};

    # Put the results in an orb packet and put the packet in an orb
    putpfpkt($orbname,$srcname,$pfstr);

    # Exit with the highest return value of the individual tests
    @RETVAL_SORT = sort { $b <=> $a } @RETVAL;
    print_results($sta,$commtype,$provider);
    exit $RETVAL_SORT[0];
    exit 0;
}

sub usage {
    pod2usage(-verbose => 0, -exitval => $ERRORS{UNKNOWN});
    #print "Usage: nagios_check_tastation -H <hostname> -o <orb> -d <dlsta>\n";
    #print "       -c <commtype> -p <provider>\n";
    #exit $ERRORS{'UNKNOWN'};
}

sub ping_default {
    my $ip = shift;
    #($ping_rta,$ping_loss) = ping($ip,"icmp",$sent_packets,$icmp_timeout,$icmp_interval);
    #($ping_rta,$ping_loss) = ping($ip,"external",$sent_packets,$icmp_timeout,$icmp_interval);
    ($results{ping_rta}, $results{ping_loss}) = ping($ip,"tcp",$sent_packets,$tcp_timeout,$tcp_interval,$tcp_port);
    my $retval = comp_ping_thresholds($results{ping_rta},$results{ping_loss});
    return $retval;

}
# Call ping function w/ cellular station params and check result against thresholds
sub ping_cellular {
    print STDERR "ping_cellular called\n" if $opt_v;
    return ping_default(@_);
}

# Call ping function w/ generic vsat station params and check result against thresholds
sub ping_vsat {
    print STDERR "ping_vsat called\n" if $opt_v;
    my $ip = shift;
    ($results{ping_rta}, $results{ping_loss}) = ping($ip,"tcp",$sent_packets,$tcp_timeout,$tcp_interval,$tcp_port);
    my $retval = comp_ping_thresholds($results{ping_rta},$results{ping_loss});
    return $retval;
}

# Call ping function w/ wb vsat station params and check result against thresholds
sub ping_wb {
    print STDERR "ping_wb called\n" if $opt_v;
    my $ip = shift;
    ($results{ping_rta}, $results{ping_loss}) = ping($ip,"tcp",$sent_packets,$tcp_timeout,$wb_tcp_interval,$tcp_port);
    my $retval = comp_ping_thresholds($results{ping_rta}, $results{ping_loss});
    return $retval;
}

# Use Perl Net::Ping to test stations for reachability. WB stations require TCP
# ping to port 5380 (Linksys router) to check reachability since ICMP ping is
# not allowed on their network
sub ping {
    my $ip = shift;
    my $proto = shift;
    my $sent_packets = shift;
    my $timeout = shift;
    my $interval = shift;
    my $port = shift;
    my $ping;
    my $received_packets = 0;
    my $rtt_total = 0;
    my ($rtta,@rtts);

    if ($proto eq "icmp") {
        $ping = Net::Ping->new("icmp");
        $ping->hires();
        print STDERR "Using ICMP\n" if $opt_v;
    }
    elsif ($proto eq "external") {
        $ping = Net::Ping->new("external");
        $ping->hires();
        print STDERR "Using External Ping\n" if $opt_v;
    }
    elsif ($proto eq "tcp") {
        $ping = Net::Ping->new("tcp");
        $ping->port_number($port);
        $ping->hires();
        print STDERR "Using TCP\n" if $opt_v;
    }
    else {
        print "Invalid protocol for ping.\n";
        exit($ERRORS{UNKNOWN});
    }

    for (my $packets = 1; $packets <= $sent_packets; $packets++) {
        print STDERR "sending ping $packets of $sent_packets\n" if $opt_v;
        my ($success,$rtt) = $ping->ping($ip,$timeout);
        print STDERR "success = $success, rtt = \"$rtt\"\n" if $opt_v;
        if ($success) {
            $received_packets++;
            my $rttf = sprintf("%.2f", $rtt * 1000);
            push @OUTPUT, "$ip alive, seq = $packets, round trip = $rttf ms\n";
            push @rtts,$rttf;
        }
        else {
            push @OUTPUT, "$ip unreachable\n";
        }
        unless ($packets == $sent_packets) {
            print STDERR "sleeping $interval seconds" if $opt_v;
            sleep($interval);
        }
    }
    # print "@rtts\n";
    $ping->close();

    # Calculate RTT Average
    foreach my $rtt (@rtts) {
        $rtt_total += $rtt;
        # print "$rtt_total\n";
    }
    if ($received_packets) {
        $rtta = sprintf("%.2f", $rtt_total / $received_packets);
    }
    else {
        $rtta = "-";
    }

    # Calculate % loss
    my $ping_loss = (1 - ($received_packets / $sent_packets)) * 100;
    # print "RTTA: $rtta, % Loss: $ping_loss\n";
    return $rtta,$ping_loss;
}

sub comp_ping_thresholds {
    my $ping_rta = shift;
    my $ping_loss = shift;
    my ($retval_loss,$retval_rta,$retval);
    my $err_string='';

    # Compare % loss against thresholds
    if ( $ping_loss < $warn_loss ) {
        $retval_loss = $ERRORS{'OK'};
    }
    elsif (( $ping_loss >= $warn_loss ) && ( $ping_loss < $alarm_loss )) {
        $retval_loss = $ERRORS{'WARNING'};
    }
    elsif (( $ping_loss >= $alarm_loss ) && ( $ping_loss < $crit_loss )) {
        $retval_loss = $ERRORS{'ALARM'};
    }
    elsif (( $ping_loss >= $crit_loss ) && ( $ping_loss < 100 )) {
        $retval_loss = $ERRORS{'CRITICAL'};
    }
    elsif ( $ping_loss == 100 ) {
        $retval_loss = $ERRORS{'DOWN'};
    }
    else {
        $retval_loss = $ERRORS{'UNKNOWN'};
    }

    # Compare ping RTA against thresholds
    if ($ping_rta ne '-') {
        if ( $ping_rta < $warn_rta ) {
            $retval_rta = $ERRORS{'OK'};
        }
        elsif (( $ping_rta >= $warn_rta ) && ( $ping_rta < $alarm_rta )) {
            $retval_rta = $ERRORS{'WARNING'};
        }
        elsif (( $ping_rta >= $alarm_rta ) && ( $ping_rta < $crit_rta )) {
            $retval_rta = $ERRORS{'ALARM'};
        }
        elsif (( $ping_rta >= $crit_rta )) {
            $retval_rta = $ERRORS{'CRITICAL'};
        }
        else {
            $retval_rta = $ERRORS{'UNKNOWN'};
        }
    }
    else {
        $retval_rta = $ERRORS{'UNKNOWN'};
    }

    # Use the more urgent of two return values
    if ($retval_loss > $retval_rta) {
        $retval = $retval_loss;
    }
    else {
        $retval = $retval_rta;
    }

    # Get status for output string
    foreach my $imretval (keys %ERRORS) {
        $err_string = $imretval if $retval == $ERRORS{$imretval};
    }

    # Print ping results for probe
    push @REASON, "PING $err_string - % ping packet loss = ${ping_loss}%, rta = $ping_rta ms";
    return ($retval);
}

# Use correct SNMP paramters to communicate w/ Airlink modems. Try using perl
# fork and exec low level functions to avoid passing Net-SNMP snmpget command
# to shell
sub ravenx_snmpget {
    my $ip = shift;
    my $oid = shift;
    my $SNMPGET = "$snmppath/snmpget";

    unless (-e $SNMPGET) {
        push @OUTPUT, "$SNMPGET not found";
      return;
    }
    else {
        my $pid;
        my @snmpargs = (
            '-t', $SNMP3_TIMEOUT,
            '-m', 'ALL',
            '-r', $SNMP3_RETRIES,
            '-v', '3',
            '-l', 'authPriv',
            '-a', $SNMP3_AUTHTYPE,
            '-u', $SNMP3_SECNAME,
            '-A', $SNMP3_AUTHPASSWORD,
            '-x', $SNMP3_PRIVPROTOCOL,
            '-X', $SNMP3_PRIVPASSWORD,
            "${ip}:161",
            $oid
        );

        # Fork and exec an snmpget from the main script
        pipe(README,WRITEME);
        if ($pid = fork) {
            # Parent script
            close WRITEME;
            waitpid($pid,0);
        }
        else {
            die "Could not fork to run $SNMPGET\n" unless defined $pid;
            # Forked snmpget
            open(STDERR,">&=WRITEME"); # Redirect STDERR and STDOUT to IPC pipe
            open(STDOUT,">&=WRITEME") or die("Couldn't redirect $SNMPGET");
            close README;
            # Use list syntax w/ exec call to avoid shell
            exec($SNMPGET,@snmpargs) or die("Couldn't exec $SNMPGET");
        }
        my $result = <README>;
        chomp($result);
        close README;
        (undef,$result) = split /:\s+/,$result;

        # Return undef result if snmpget times out
        return unless $result;
        if ($result eq "Timeout") {
            push @OUTPUT,"Snmpget timed out for $oid";
            return;
        }
        elsif ($result =~ /No Response/) {
            push @OUTPUT,"No response to snmpget request";
            return;
        }
        else {
            return $result;
        }
    }
}

sub comp_rssi_thresholds {
    my $rssi = shift;
    my $retval;
    my $err_string='';

    # Compare RSSI against thresholds
    if ($rssi eq "-") {
        $retval = $ERRORS{UNKNOWN};
    }
    else {
        if ( $rssi > $warn_rssi ) {
            $retval = $ERRORS{'OK'};
        }
        elsif (( $rssi <= $warn_rssi ) && ( $rssi > $alarm_rssi )) {
            $retval = $ERRORS{'WARNING'};
        }
        elsif (( $rssi <= $alarm_rssi ) && ( $rssi > $crit_rssi )) {
            $retval = $ERRORS{'ALARM'};
        }
        elsif (( $rssi <= $crit_rssi )) {
            $retval = $ERRORS{'CRITICAL'};
        }
        else {
            $retval = $ERRORS{'UNKNOWN'};
        }
    }

    # Get status for output string
    foreach my $imretval (keys %ERRORS) {
        $err_string = $imretval if $retval == $ERRORS{$imretval};
    }

    # Print ping results for probe
    push @REASON, "RSSI $err_string - rssi = $rssi";

    return ($retval);
}

# Run tests for stations based on commtype and provider
sub test_station {
    my $ip = shift;
    my $commtype = shift;
    my $provider = shift;
    my $retval;

    COMMTYPE: for ($commtype) {
        /cdma poc|cell modem/i && do {
            CELLULAR: for ($provider) {
                # /foo/i && do { foostuff; last CELLULAR; };
                /(att|verizon)-vpn/i && do {
                    # For VPN sites, assume RV-50 modem.
                    print "Choosing RV-50 probes";
                    last CELLULAR;
                };
                do {
                    # CELLULAR DEFAULT
                    # Non-VPN, assume RavenX
                    print "Choosing RavenX probes\n" if $opt_v;
                    $retval = ping_cellular($ip);
                    push @RETVAL, $retval;
                    # Don't do SNMP tests if station is unreachable
                    last CELLULAR if ($retval == $ERRORS{DOWN});

                    #foreach my $test (\&ping_cellular,
                    #    \&ravenx_check_rssi,
                    #    \&ravenx_check_netc,
                    #    \&ravenx_check_ecio,
                    #    \&ravenx_check_rset,
                    #    \&ravenx_check_pwin,
                    #    \&ravenx_check_btmp
                    #) {
                    #    $retval = &$test($ip);
                    #    push @RETVAL, $retval;
                    #}

                    my ($var, $oid_info);
                    while (($var, $oid_info) = each
                           ($cell_modem_models{'ravenx'})) {
                        print "Checking $var ($oid_info->{oid})...\n" if $opt_v;
                        my $result = ravenx_snmpget($ip, $oid_info->{oid});
                        if (defined $result) {
                            $result =~ s/"//g;
                            $results{$var} = $result;

                            if (exists $oid_info->{check}) {
                                print "Using check $oid_info->{check}\n" if $opt_v;
                                $retval = $oid_info->{check}($result);
                            }
                            else {
                                $retval = $ERRORS{OK};
                            }
                        }
                        else {
                            $retval = $ERRORS{UNKNOWN};
                        }
                        push @RETVAL, $retval;
                    }
                };
            }
            last COMMTYPE;
        };
        /vsat/ && do {
            VSAT: for ($provider) {
                # /foo/i && do { foostuff; last VSAT; };
                /wild blue/i && do {
                    foreach my $test (\&ping_wb) {
                        $retval = &$test($ip);
                        push @RETVAL, $retval;
                    }
                    last VSAT;
                };
                do {
                    # VSAT DEFAULT
                    foreach my $test (\&ping_vsat) {
                        $retval = &$test($ip);
                        push @RETVAL, $retval;
                    }
                };
            }
            last COMMTYPE;
        };

        do {
            # COMMTYPE DEFAULT (Any station that doesn't fall into category above)
            foreach my $test (\&ping_vsat) {
                $retval = &$test($ip);
                push @RETVAL, $retval;
            }
        };
    }
}

sub print_results {
    my $sta = shift;
    my $commtype = shift;
    my $provider = shift;

    # Print Intermapper variables
    print "\\{ \$sta := \"$sta\",
               \$commtype := \"$commtype\",
               \$provider := \"$provider\",
               \$pingpackets := \"$sent_packets\",
               \$rta := \"$results{ping_rta}\",
               \$pingloss := \"$results{ping_loss}\",
               \$rssi := \"$results{rssi}\",
               \$netc := \"$results{netc}\",
               \$ecio := \"$results{ecio}\",
               \$rset := \"$results{rset}\",
               \$pwin := \"$results{pwin}\",
               \$btmp := \"$results{btmp}\" } \n";
    # print reason for probe status
    foreach my $i (@REASON) {
        chomp($i);
        print "$i\n";
    }

    # print additional test output
    foreach my $i (@OUTPUT) {
        chomp($i);
        print "$i\n";
    }
}

# Using BRTT's example to put IM values in orb for orb2rrd to use
sub putpfpkt {
    my $orbname = shift;
    my $srcname = shift;
    my $pfstr = shift;
    my ($orb,$string,$packet,$pkttime,$nbytes,$time);

    # Use eval to trap orb function errors since we don't want the script
    # execution blowing up if orb packets have errors getting sent
    eval {
        $orb = orbopen($orbname, "w");
        #$string = pf2string($pf);
        $packet = str2pkt($pfstr);
        $pkttime = now();
        $nbytes = length($packet)+1;
        $time = strtime($pkttime);
        orbput($orb,$srcname,$pkttime,$packet,$nbytes );
        #push @OUTPUT, "$srcname bytes: $nbytes pkttime: $time string: $pfstr\n",
        orbclose($orb);
    };
    push @OUTPUT,"Problem sending orb packet: $@" if $@;
}

sub str2pkt {
    my $string = shift;
    my $packet = chr(0) ;
    $packet .= chr(1) ;
    $packet .= $string ;
    return $packet ;
}

__END__
=head1 NAME

check_tastation - Nagios probe to check a transportable array station

=head1 SYNOPSIS

F<check_tastation> [-v] [-d] -H <hostname> -o <orbname> -d <dlsta> -c <commtype> -p <provider>

=head1 BUGS AND CAVEATS

Path to the snmp command is hardcoded

=head1 AUTHOR

Originally written by Brian Battistuz as part of the Transportable Array
project.

Modified by Geoff Davis to work with later versions of Antelope and Intermapper

=head1 SUPPORT

Contributed: NO BRTT support -- please contact author.

=cut
# vim:ft=perl
