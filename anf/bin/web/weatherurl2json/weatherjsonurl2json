#!/usr/bin/env python

"""
Super-simple script to grab a 
3rd party JSON output file and 
copy to local JSON file.
Run via cron every 60 mins

@package  Datascope
@author   Rob Newman <robertlnewman@gmail.com> 858.212.1333
@modified 2011-07-12
@license  MIT style license
"""

import sys
import os
import json
from optparse import OptionParser
import urllib
import math
from time import time

# Load datascope functions
sys.path.append('%s/local/data/python/antelope' % os.environ['ANTELOPE'])
from stock import pfupdate, pfget, strtime

# Get command line arguments
usage = "Usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-v", action="store_true", dest="verbose", help="verbose output", default=False)
(options, args) = parser.parse_args()
if options.verbose:
    verbose = True
else:
    verbose = False

def logfmt(message, output=False):
    """"Output a log
    message with a 
    timestamp"""
    # {{{ logfmt
    curtime = strtime(time())
    if output == 's':
        return '%s %s\n' % (curtime, message)
    else:
        print curtime, message
    # }}}

def main():
    """Main processing 
    script
    """
    # {{{ main
    if verbose:
        logfmt("Start script")
    # Get config parameter file vars
    common_pf = 'common.pf'
    pfupdate(common_pf)
    cache_json = pfget(common_pf, 'CACHEJSON')
    weather_json_url = pfget(common_pf, 'WEATHER_SERVICE_JSON')
    in_json_path = '%s/stations/stations.json' % cache_json
    out_json_dir = '%s/weather/' % cache_json
    if verbose:
        logfmt("Open stations JSON file '%s'" % in_json_path)
        logfmt("Read stations JSON file")
    fjson = open(in_json_path,'r')
    stations = fjson.read()
    stations = json.loads(stations)
    statypes = ('active', 'adopt', 'decom')
    for s in statypes:
        if verbose:
            logfmt("- Working on '%s' stations" % s)
        for k in sorted(stations[s].iterkeys()):
            lat = stations[s][k]['lat']
            lon = stations[s][k]['lon']
            if verbose:
                logfmt("- Station %s: Coords: %sN, %sE" % (k, lat, lon))
            lat_floor = math.floor(lat)
            lon_floor = math.floor(lon)
            lat_ceil = math.ceil(lat)
            lon_ceil = math.ceil(lon)
            # Build the URL query
            # weather_url = weather_json_url + "?north=%s&south=%s&east=%s&west=%s" % (lat_ceil, lat_floor, lon_ceil, lon_floor)
            weather_url = weather_json_url + "?lat=%s&lng=%s" % (lat, lon)
            if verbose:
                logfmt(" - Query: %s" % weather_url)
            # Retrieve the remote JSON content
            urllib.urlretrieve( weather_url, '%s/%s.json' % (out_json_dir, k) )
        fjson.close()
    if verbose:
        logfmt("End script")
    return 0
    # }}}

if __name__ == '__main__':
    status = main()
    sys.exit(status)
