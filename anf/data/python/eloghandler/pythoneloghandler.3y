.TH PYTHONELOGHANDLER 3Y
.SH NAME
pythoneloghandler \- Python log handler module for elog
.SH SYNOPSIS
.nf
import logging
from anf.eloghandler import ElogHandler

logging.basicConfig()
logger = logging.getLogger()
# Remove the default handler and add ours
logger.handlers=[]
handler = ElogHandler()
logger.addHandler(handler)

# Set the logging level
logger.setLevel(logging.WARNING)

# The next message won't get printed because we set the logging level above
logger.debug("Debug message")
# This message will get printed as if elog.complain(msg) was called.
logger.critical("Critical error")
.fi
.SH DESCRIPTION
A log handler module for the default Python logging module that sends log
messages to Antelope's elog routines.

This module is designed to allow Python scripts written for Antelope to use the
built-in logging module and still retain the normal look-and-feel of Antelope
 programs that use the elog routines.

Upon instantiation of a ElogHandler object, antelope.elog.init() is called with
argv - there is no need to call antelope.elog.init() manually.

.SH "LOGGING LEVELS"
The Python Logging module and Elog have similar log levels, though there isn't
a one-to-one mapping for all cases. While the C library for elog has additional
levels, the python bindings only expose ELOG_DEBUGGING, ELOG_NOTIFY, and
ELOG_COMPLAIN. ELOG_ALERT, ELOG_WARNING are not exposed to us via Python,
ELOG_DIE and ELOG_FAULT are not implemented because logging routines shouldn't
cause a program to exit.

.nf
logging.debug    == elog.debug
logging.info     == elog.notify
logging.warning  == elog.complain
logging.error    == elog.complain
logging.critical == elog.complain
.fi

An unknown logging level is mapped to elog.complain

.SH OPTIONS
.SS argv
The system argv array. This is passed to elog.init() for you.

If set to None (the default), the default behavior for elog.init() is observed,
namely:

If the argv argument is None, then sys.argv is used, with argv[0] filtered
through basename() and splitext() to remove any path prefixes and filename
extension suffixes. This is usually the desired behavior. However the
programmer may override this behavior by passing in something else for argv.

.SH "SEE ALSO"
.nf
antelope_python(3y), the Python logging module documentation
.fi
.SH "BUGS AND CAVEATS"
Mapping of log levels is currently hard coded.

logging.critical is intentionally not mapped to elog.die() because logging
routines should not cause a program to exit.  That call is a bad idea in
general in a language with exception handling. Catch the exception, clean up,
and exit in your exception handler.

.SH AUTHOR
Geoff Davis, geoff@ucsd.edu
