.TH PYTHONELOGHANDLER 3Y
.SH NAME
pythoneloghandler \- Python log handler module for elog
.SH SYNOPSIS
.nf
import logging
from anf.eloghandler import ElogHandler

logging.basicConfig()
logger = logging.getLogger()
# Remove the default handler and add ours
logger.handlers=[]
handler = ElogHandler(sys.argv)
logger.addHandler(handler)

# Set the logging level
logger.setlevel(logging.WARNING)

# The next message won't get printed because we set the logging level above
logger.debug("Debug message")
# This message will get printed as if elog.complain(msg) was called.
logger.critical("Critical error")
.fi
.SH DESCRIPTION
A log handler module for the default Python logging module that sends log
messages to Antelope's elog routines.

This module is designed to allow Python scripts written for Antelope to use the
built-in logging module and still retain the normal look-and-feel of Antelope
 programs that use the elog routines.

Upon instantiation of a ElogHandler object, antelope.elog.init() is called with
argv - there is no need to call antelope.elog.init() manually.

.SH "LOGGING LEVELS"
The Python Logging module and Elog have similar log levels, though there isn't
a one-to-one mapping for all cases. ELOG_DIE and ELOG_FAULT are not
implemented.

Note that these log level constants aren't typically addressed directly.
Instead, you should call logging.debug(msg), logging.info(msg), etc.

.nf
logging.DEBUG    == elog.ELOG_DEBUGGING
logging.INFO     == elog.ELOG_NOTIFY
logging.WARNING  == elog.ELOG_ALERT
logging.ERROR    == elog.ELOG_WARNING
logging.CRITICAL == elog.ELOG_COMPLAIN
.fi

An unknown logging level is mapped to elog.ELOG_COMPLAIN

.SH OPTIONS
.SS argv
The system argv array. This is passed to elog.init() for you.
Defaults to sys.argv.
.SH "SEE ALSO"
.nf
antelope_python(3y), the Python logging module documentation
.fi
.SH "BUGS AND CAVEATS"
Mapping of log levels is currently hard coded.

There is no implementation of the elog.die() level - that call is a bad idea in
general in a language with exception handling. Catch the exception, clean up,
and exit in your exception handler.

.SH AUTHOR
Geoff Davis, geoff@ucsd.edu
